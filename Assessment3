/* ISE102 Assessment 3
Ashleigh Byrne A00145987
Victoria Watts A00150225
*/

using System;
using System.Text.RegularExpressions;

namespace BankOfNswApp.BankApplication // Namespace for the Bank of NSW application
{
    public class Bank // Bank class
    {
        // Create username and password for an existing account. Static so only one user can login at a time, and private so it's only accessible within this class:
        private static string username = "Joe.Doe"; // User's existing username for account login   
        private static string password = "password123"; // User's existing password for account login
        private static double accountBalance = 0; // User's account balance, current balance is 0

        public static void Main(string[] args) // Main method to run the program
        {
            Console.WriteLine("Welcome to the Bank of NSW!\n"); // Welcome message
            MainMenu(); // Call the MainMenu method to display the menu options for the user to select from
        }

        private static void MainMenu() // MainMenu method
        {
            while (true) // Infinite loop to keep the menu running until the user chooses to exit
            {
                Console.WriteLine("\nPlease select an option below:"); // Prompt user to select an option
                Console.WriteLine("1. Login"); // Option to login to an existing account
                Console.WriteLine("2. Signup"); // Option to create a new account
                Console.WriteLine("3. Exit"); // Option to exit the program

                string choice = Console.ReadLine(); // Read user input and store it in the choice variable

                switch (choice) // Switch statement to handle user input
                {
                    case "1": // If user selects option 1
                        if (Login()) // The Login method is called, and enters the following if statement if the login is successful
                        {
                            MainMenu2(); // If login is successful, call the MainMenu2 method to display account options
                        }
                        break; // Break out of the switch statement
                    case "2": // If user selects option 2
                        Signup(); // Call the Signup method to create a new account
                        break; // Break out of the switch statement
                    case "3": // If user selects option 3
                        Console.WriteLine("Shutting down..."); // Exit the program
                        return; // Return out of the MainMenu method
                    default: // If user selects an invalid option
                        Console.WriteLine("Choose a valid option between 1 and 3."); // Prompt user to select a valid option
                        break; //  Break out of the switch statement
                }
            }
        }

        private static bool Login() // Login method
        {
            Console.WriteLine("\n--- Login ---"); // Title for the login section
            Console.Write("Username: "); // Prompt user for username
            string inputu = Console.ReadLine(); // Read user input for username and assign it to inputu variable

            Console.Write("Password: "); // Prompt user for password
            string inputp = Console.ReadLine(); // Read user input for password and assign it to inputp variable

            if (inputu == username && inputp == password) // Check if the input username and password match the existing account credentials
            {
                Console.WriteLine("\nLogin successful. Welcome, " + username + "!"); // If login is successful, display a welcome message
                return true; // Return true to indicate successful login, then the program will enter the MainMenu2 method from the "if" statement in the MainMenu method
            }
            else // If the input username and password do not match the existing account credentials
            {
                Console.WriteLine("\nIncorrect username or password."); //  Display an error message
                return false; // Return false to indicate unsuccessful login, then the program will return to the MainMenu method
            }
        }

        private static void Signup() // Signup method
        {
            Console.WriteLine("\n--- Signup ---"); // Title for the signup section

            Console.Write("Create a username: "); // Prompt user for username
            username = Console.ReadLine(); // Read user input for username and assign it to the static username variable

            Console.Write("Create a password: "); // Prompt user for password
            password = Console.ReadLine(); // Read user input for password and assign it to the static password variable

            Console.Write("Email: "); // Prompt user for email
            string email = Console.ReadLine(); // Read user input for email and assign it to the email variable
            while (!Regex.IsMatch(email, @"\.com$")) // Use Regex for data validation to check if the email ends with ".com" 
            {
                Console.Write("Invalid email! Enter a valid email (must end with .com): "); // Prompt user to enter a valid email if the input is invalid
                email = Console.ReadLine(); // Read user input for email again
            }

            Console.Write("Age: "); // Prompt user for age
            int age; // Declare age variable as an integer
            while (!int.TryParse(Console.ReadLine(), out age) || age < 18 || age > 100) // Use int.TryParse to check if the input is a valid integer and within the range of 18 to 100
            {
                Console.Write("Invalid age! Age must be between 18 and 100: "); // Prompt user to enter a valid age if the input is invalid
            }

            Console.Write("Phone number (without +61): "); // Prompt user for phone number
            int phone; // Declare phone variable as an integer
            while (!int.TryParse(Console.ReadLine(), out phone) || phone < 400000000 || phone > 499999999) // Use int.TryParse to check if the input is a valid integer and within the range of 400000000 to 499999999
            {
                Console.Write("Invalid phone number! Must start with '04': "); // Prompt user to enter a valid phone number if the input is invalid
            }

            Console.WriteLine("\nSignup successful! You can now login."); // Display a success message
            accountBalance = 0; // Default account balance for a new user is $0
        }

        private static void MainMenu2() // MainMenu2 method, called after a successful login
        {
            while (true) // Infinite loop to keep the menu running until the user chooses to logout
            {
                Console.WriteLine("\nSelect 1-4:"); // Prompt user to select an option
                Console.WriteLine("1. View Account Balance"); // Option to view account balance
                Console.WriteLine("2. Deposit"); // Option to deposit money
                Console.WriteLine("3. Withdrawal"); // Option to withdraw money
                Console.WriteLine("4. Logout"); // Option to logout

                string choice = Console.ReadLine(); // Read user input and store it in the choice variable

                switch (choice) // Switch statement to handle user's input
                {
                    case "1": // If user selects option 1
                        ViewBalance(); // Call the ViewBalance method to display the account balance
                        break; // Break out of the switch statement
                    case "2": // If user selects option 2
                        Deposit(); // Call the Deposit method to deposit money into the account
                        break; // Break out of the switch statement
                    case "3": // If user selects option 3
                        Withdrawal(); // Call the Withdrawal method to withdraw money from the account
                        break; // Break out of the switch statement
                    case "4": // If user selects option 4
                        Console.WriteLine("Logging out..."); // Display a logout message
                        return; // Return out of the MainMenu2 method to go back to the MainMenu method
                    default: // If user selects an invalid option not listed above
                        Console.WriteLine("Choose a valid option between 1 and 4."); // Prompt user to select a valid option
                        break; // Break out of the switch statement
                }
            }
        }

        private static void ViewBalance() // ViewBalance method
        {
            Console.WriteLine($"\nYour current account balance is: ${accountBalance:F2}"); // Display the current account balance formatted to 2 decimal places
        }

        private static void Deposit() // Deposit method
        {
            Console.WriteLine("\nEnter deposit amount: $"); // Prompt user to enter the deposit amount
            if (double.TryParse(Console.ReadLine(), out double depositAmount) && depositAmount > 0) // Use double.TryParse to check if the input is a valid double and greater than 0
            {
                accountBalance += depositAmount; // Add the deposit amount to the account balance variable
                Console.WriteLine($"Deposit successful! New balance: ${accountBalance:F2}"); // Display a success message with the new account balance formatted to 2 decimal places
            }
            else
            {
                Console.WriteLine("Invalid amount. Please try again."); // Display an error message if the input is invalid
            }
        }

        private static void Withdrawal() // (Victoria)
        {
            Console.WriteLine("Enter your amount for withdrawal: "); 
            if (double.TryParse(Console.ReadLine(), out double withdrawalAmount) && withdrawalAmount > 0) // Creates a double variable based on users input and holds that value and checks that the value is greater than 0
            {
                if (withdrawalAmount <= accountBalance) // Checks that withdrawal amount is within your account balance
                {
                    accountBalance -= withdrawalAmount; // Removes the withdrawn amount from your current balance and displays the new balance
                    Console.WriteLine($"Sucessfully withdrawn, your new balance is: ${accountBalance:F2}");
                }
                else
                {
                    Console.WriteLine("Withdrawal failed, your balance is to low. Please check your balance and try again"); // Respsonce for enetering an amount higher than your current balance
                }
            }
            else
            {
                Console.WriteLine("Your withdrawal input was not valid. Please try again"); // Else statement for if a incorrect input is entered
            }
        }
    }
}


