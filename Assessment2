/* ISE102 Assessment 2 Case Study
Ashleigh Byrne A00145987
Victoria Watts A00150225
Jaspa Mahoney
*/

using System;
using System.Runtime.Intrinsics.X86;
using System.Text.RegularExpressions;

namespace ISE102Assessment2
{

    // Task 1: Login Module (Victoria)
    public class LogSignMenu  // Creating class for Menu
    {
        public static string username = "yipppie"; // Setting static user
        public static string password = "password1234"; // Setting static password

        // Further variables for use in Task 2 Signup Module:
        private string email; // Email address of the user.
        private int age; // Age of the user. Variable is an integer so it can be validated to be between 18 and 100.
        private int phone; // Phone number of the user. Variable is an integer so it must be entered as digits.
        private string newPassword; // Password the user enters in at the end of their signup. The user will need to enter it in a second time correctly to proceed.
        private string phoneAreaCode; // Phone area code to add to the start of the user's phone number

        public void Main(string[] args)
        {
            LogSignMenu menu = new LogSignMenu(); // Create an instance of LogSignMenu

            while (true)
            {
                Console.WriteLine("Select 1-3: "); // Creating menu
                Console.WriteLine("1 Login");
                Console.WriteLine("2 Signup");
                Console.WriteLine("3 Exit");

                string choice = Console.ReadLine();
                // Creating cases for Login and signup menu
                switch (choice)
                {
                    case "1":
                        Login();
                        break;
                    case "2":
                        menu.Signup();
                        break;
                    case "3":
                        Console.WriteLine("Shutting down");
                        return;
                    default:
                        Console.WriteLine("Choose a option on the menu between 1 to 3.");
                        break;
                }
            }

        }

        public static void Login()
        {
            Console.WriteLine("Username: "); // Asking user for their username
            string inputu = Console.ReadLine();

            Console.WriteLine("Password: "); // Asking user for their password
            string inputp = Console.ReadLine();

            if (inputu == username && inputp == password) // Verifying password and username
            {
                Console.WriteLine("Login verified, Welcome."); // Response for correct Login
            }
            else
            {
                Console.WriteLine("Password or username is incorrect."); // Response for incorrect password or username
            }
        }


        // Task 2: Signup Module (Ashleigh)
        public void Signup() //  Container to call the SignupDetails and SignupConfirmation methods
        {
            SignupDetails();
            SignupConfirmation();
        } 


        public void SignupDetails() // Method to collect the user's information for the Signup Module.
        {
            Console.WriteLine($"Username: {username}"); // Pulls the username from the login module into the signup module so the user can see it is correct. This is a static variable so it can be accessed from outside of the class.

            Console.WriteLine("Email: "); // Prompts the user to enter their email address
            email = Console.ReadLine().ToLower(); // Assigns the user's input to the email variable, and forces it to lower case so it is in the correct format.
            while (!Regex.IsMatch(email, @"\.(com)$")) // Data validation to check if the email address is valid. The email must contain a "." and end with ".com". Source for Regex method: (IAmTimCorey, 2022) 
            {
                Console.WriteLine("Invalid email! Please enter a valid email (e.g. example@example.com): "); // Prompt the user to enter a valid email address if it does not match the regex pattern
                email = Console.ReadLine().ToLower(); // Assign the user's input to the email variable after being prompted to enter it in correctly.
            }

            Console.WriteLine("Age: "); // Prompts the user to enter their age
            while (!int.TryParse(Console.ReadLine(), out age) || age < 18 || age > 100) // Data validation to check if the age is valid. The age must be between 18 and 100.
            {
                Console.WriteLine("Invalid age! Age must be between 18 and 100. Please enter again: "); // Prompt the user to enter a valid age if it does not match the regex pattern.
            }

            Console.WriteLine("Phone: +61"); // Prompts the user to enter their phone number

            // Data validation to check if the phone number is valid. Source for TryParse method: (C# TryParse - tutorialsEU - C#, 2023)
            // TryParse converts the user's string input into an integer, and this number is stored in the 'phone' variable.
            // As integers cannot start with 0 this is disregarded from the start of the number, and the resulting number must be between 400000000 and 499999999 to be a valid phone number:
            while (!int.TryParse(Console.ReadLine(), out phone) || phone > 499999999 || phone < 400000000)
            {
                Console.WriteLine("Invalid phone number! Please enter a phone number starting with '04':"); // Prompts the user to enter a valid phone number if it does not match the regex pattern.
            }
            phoneAreaCode = "+61" + phone; // Creates a phone area code for the user by adding "+61" to the front of the phone number entered by the user.


            Console.WriteLine("New password: "); // Prompts the user to enter a new password
            newPassword = Console.ReadLine(); // Assigns the user's input to the 'newPassword' variable

            private string confirmPassword; // Declares a new variable to store the user's password confirmation

            do
            {
                Console.WriteLine("Confirm your new password:");
                confirmPassword = Console.ReadLine();

                if (confirmPassword != newPassword)
                {
                    Console.WriteLine("Passwords do not match. Please try again.");
                }
            }
            while (confirmPassword != newPassword); // Data validation to check if the password is valid. The password must match the password entered in the Login Module.

            password = newPassword;

        } 
    
        public void SignupConfirmation() // Method to confirm the user's information for the Signup Module.
        {
            // Program writes out the user's input information to confirm it is all correct
            Console.WriteLine("\nPlease confirm your details below:\n");
            Console.WriteLine($"Username: {username}"); // Displays the username created in the login module
            Console.WriteLine($"Email: {email}"); // Displays the email address entered by the user
            Console.WriteLine($"Age: {age}"); // Displays the age entered by the user
            Console.WriteLine($"Phone: {phoneAreaCode}"); // Displays the phone number entered by the user starting with the area code


            Console.Write("\nIs the information correct? (yes/no): "); // Prompts the user to confirm if the information is correct
            string confirmation = Console.ReadLine().ToLower(); // Assign the user's input to the confirmation variable, and force it to lower case so it is in the correct format.

            if (confirmation != "yes") // If the user enters anything other than "yes", the program will enter this "if" statement.
            {
                Console.WriteLine("Restarting signup process...\n"); // Inform the user that the signup process is restarting
                Signup(); // Calls the Signup method to run the SignupDetails and SignupConfirmation methods again
            }
            else
            {
                Console.WriteLine($"Signup successful! Welcome!"); // If the user enters in "yes", the program will enter this "else" statement and inform the user that their signup was successful.
                LogSignMenu(); // Calls the 'LogSignMenu' function again to bring the user back to the main menu.
            }
        }
    }
}



/* References:

IAmTimCorey. (2022). Intro to Regular Expressions - How to use Regex in C#. https://www.youtube.com/watch?v=R5BcHIMZMxc 
tutorialsEU - C#. 2023. C# TryParse - Converting strings in other data types. https://youtu.be/WV_xXlWl8bQ?si=JonkHpwEc115iSS1

*/
